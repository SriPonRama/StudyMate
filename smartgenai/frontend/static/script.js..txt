// script.js

// Helper function to show messages
function showStatus(id, message) {
    document.getElementById(id).textContent = message;
}

// --- Document Upload ---
async function uploadPDF() {
    const fileInput = document.getElementById('pdfUpload');
    const file = fileInput.files[0];
    const status = document.getElementById('uploadStatus');

    if (!file) {
        showStatus('uploadStatus', 'Please select a PDF file.');
        return;
    }

    showStatus('uploadStatus', 'Uploading...');

    const formData = new FormData();
    formData.append('file', file);

    try {
        const response = await fetch('/docs/upload', {
            method: 'POST',
            body: formData,
        });

        if (!response.ok) {
            showStatus('uploadStatus', `Upload failed: ${response.status} - ${await response.text()}`);
            return;
        }

        const data = await response.json();
        showStatus('uploadStatus', `Uploaded. doc_id: ${data.doc_id}`);
        document.getElementById('docIdInput').value = data.doc_id; // Auto-populate the doc_id
    } catch (error) {
        showStatus('uploadStatus', `Upload failed: ${error}`);
    }
}

// --- Build Index ---
async function buildIndex() {
    const docId = document.getElementById('docIdInput').value;
    const status = document.getElementById('indexStatus');

    if (!docId) {
        showStatus('indexStatus', 'Please upload a document first.');
        return;
    }

    showStatus('indexStatus', 'Building index...');

    try {
        const response = await fetch(`/index/${docId}`, {
            method: 'POST',
        });

        if (!response.ok) {
            showStatus('indexStatus', `Index build failed: ${response.status} - ${await response.text()}`);
            return;
        }
        showStatus('indexStatus', 'Index build started.');

    } catch (error) {
        showStatus('indexStatus', `Index build failed: ${error}`);
    }
}

// --- Ask Question ---
async function askQuestion() {
    const docId = document.getElementById('docIdInput').value;
    const question = document.getElementById('questionInput').value;
    const answerDiv = document.getElementById('answer');
    const spansDiv = document.getElementById('spans');

    answerDiv.textContent = 'Loading...';
    spansDiv.innerHTML = ''; // Clear previous spans

    if (!docId || !question) {
        answerDiv.textContent = 'Please upload a document, build the index, and enter a question.';
        return;
    }

    try {
        const response = await fetch('/qa/ask', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ doc_id: docId, question: question }),
        });

        if (!response.ok) {
            answerDiv.textContent = `Question failed: ${response.status} - ${await response.text()}`;
            return;
        }

        const data = await response.json();
        answerDiv.textContent = `Answer: ${data.answer}`;

        // Display spans (relevant text chunks)
        if (data.spans && data.spans.length > 0) {
            data.spans.forEach(span => {
                const spanItem = document.createElement('div');
                spanItem.classList.add('span-item');
                spanItem.innerHTML = `<strong>Chunk ID:</strong> ${span.chunk_id} (Score: ${span.score.toFixed(2)})<br>${span.text}`;
                spansDiv.appendChild(spanItem);
            });
        } else {
            spansDiv.textContent = 'No relevant spans found.';
        }

    } catch (error) {
        answerDiv.textContent = `Question failed: ${error}`;
    }
}

// --- Recall Map ---
async function getRecallMap() {
    const docId = document.getElementById('docIdInput').value;
    const img = document.getElementById('recallMap');

    if (!docId) {
        alert("Please upload a document and build the index.");
        return;
    }

    img.src = ""; // Clear previous image

    try {
        const response = await fetch(`/recall/${docId}/map.png`);
        if (!response.ok) {
            img.src = "";
            alert(`Error fetching image: ${response.status} - ${await response.text()}`);
            return;
        }

        const blob = await response.blob();
        const imageUrl = URL.createObjectURL(blob);
        img.src = imageUrl;

    } catch (error) {
        img.src = "";
        alert(`Error fetching image: ${error}`);
    }
}

// --- Create Study Plan ---
async function createStudyPlan() {
    const subjectsInput = document.getElementById('subjectsInput');
    const examDateInput = document.getElementById('examDateInput');
    const hoursPerDayInput = document.getElementById('hoursPerDayInput');
    const modeInput = document.getElementById('modeInput');
    const moodInput = document.getElementById('moodInput');
    const studyPlanDiv = document.getElementById('studyPlan');

    const subjects = subjectsInput.value.split(',').map(s => s.trim()).filter(s => s); // Split and clean
    const examDate = examDateInput.value; // YYYY-MM-DD format
    const hoursPerDay = parseInt(hoursPerDayInput.value, 10);
    const mode = modeInput.value;
    const mood = moodInput.value;

    studyPlanDiv.innerHTML = "Loading..."; // Clear Previous

    if (!subjects.length || !examDate) {
        studyPlanDiv.innerHTML = "Please enter subjects and exam date.";
        return;
    }

    try {
        const response = await fetch('/plan/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                subjects: subjects,
                exam_date: examDate,
                hours_per_day: hoursPerDay,
                mode: mode,
                mood: mood,
            }),
        });

        if (!response.ok) {
            studyPlanDiv.innerHTML = `Study plan generation failed: ${response.status} - ${await response.text()}`;
            return;
        }

        const studyPlan = await response.json();
        studyPlanDiv.innerHTML = '';  // Clear the loading message

        studyPlan.forEach(block => {
            const blockDiv = document.createElement('div');
            blockDiv.classList.add('study-plan-block');
            blockDiv.innerHTML = `
                <p><strong>Type:</strong> ${block.block_type}</p>
                <p><strong>Subject:</strong> ${block.subject}</p>
                <p><strong>Date:</strong> ${block.date}</p>
                <p><strong>Hours:</strong> ${block.hours}</p>
                <p><strong>Description:</strong> ${block.description}</p>
            `;
            studyPlanDiv.appendChild(blockDiv);
        });

        if (studyPlan.length === 0) {
             studyPlanDiv.innerHTML = "No study plan blocks generated.";
        }

    } catch (error) {
        studyPlanDiv.innerHTML = `Study plan generation failed: ${error}`;
    }
}

// --- Generate Quiz ---
async function generateQuiz() {
    const docId = document.getElementById('docIdInput').value;
    const count = parseInt(document.getElementById('quizQuestionCount').value, 10);
    const quizStatus = document.getElementById('quizStatus');
    const quizContainer = document.getElementById('quizContainer');

    quizStatus.textContent = 'Generating quiz...';
    quizContainer.innerHTML = '';  // Clear Previous

    if (!docId) {
        quizStatus.textContent = 'Please upload a document.';
        return;
    }

    try {
        const response = await fetch('/quiz/generate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ doc_id: docId, count: count }),
        });

        if (!response.ok) {
            quizStatus.textContent = `Quiz generation failed: ${response.status} - ${await response.text()}`;
            return;
        }

        const data = await response.json();
        const quizId = data.quiz_id;

        // Fetch quiz questions
        const questionsResponse = await fetch(`/quiz/${quizId}`);
        if (!questionsResponse.ok) {
            quizStatus.textContent = `Failed to retrieve quiz questions: ${questionsResponse.status} - ${await questionsResponse.text()}`;
            return;
        }

        const questions = await questionsResponse.json();

        // Display Quiz
        questions.forEach((question, index) => {
            const questionDiv = document.createElement('div');
            questionDiv.classList.add('quiz-question');
            questionDiv.innerHTML = `<p>${index + 1}. ${question.question}</p>`;

            question.options.forEach((option, optionIndex) => {
                const optionLabel = document.createElement('label');
                optionLabel.classList.add('quiz-option');
                optionLabel.innerHTML = `
                    <input type="radio" name="question-${index}" value="${optionIndex}"> ${option}
                `;
                questionDiv.appendChild(optionLabel);
            });
            const submitButton = document.createElement('button');
            submitButton.textContent = "Submit";
            submitButton.onclick = async () => {
                 const selectedOption = document.querySelector(`input[name="question-${index}"]:checked`);
                 if (!selectedOption) {
                    alert("Please select an answer");
                    return;
                 }
                 const answerIndex = parseInt(selectedOption.value, 10); // convert to number
                 await submitQuizAnswer(quizId, index, questions[index].options[answerIndex], questionDiv);
            };
            questionDiv.appendChild(submitButton);

            quizContainer.appendChild(questionDiv);
        });
        quizStatus.textContent = 'Quiz generated.';

    } catch (error) {
        quizStatus.textContent = `Quiz generation failed: ${error}`;
    }
}

// --- Submit Quiz Answer ---
async function submitQuizAnswer(quizId, questionIndex, answer, questionDiv) {
     try {
         const response = await fetch('/quiz/answer', {
             method: 'POST',
             headers: {
                 'Content-Type': 'application/json',
             },
             body: JSON.stringify({ quiz_id: quizId, question_index: questionIndex, answer: answer }),
         });

         if (!response.ok) {
             alert(`Answer submission failed: ${response.status} - ${await response.text()}`);
             return;
         }

         const result = await response.json();
         const feedback = document.createElement('p');
         feedback.textContent = `Result: ${result.correct ? 'Correct!' : 'Incorrect.'} ${result.explanation}`;

         questionDiv.appendChild(feedback);
         if (result.asset) {
             const assetImg = document.createElement('img');
             assetImg.src = result.asset;
             assetImg.alt = "Asset";
             assetImg.style.maxWidth = "200px";
             questionDiv.appendChild(assetImg);
         }
     } catch (error) {
         alert(`Answer submission failed: ${error}`);
     }
}
// --- Generate Power Hour ---
async function generatePowerHour() {
    const docId = document.getElementById('docIdInput').value;
    const status = document.getElementById('powerHourStatus');

    if (!docId) {
        status.textContent = 'Please upload a document.';
        return;
    }

    status.textContent = 'Generating Power Hour...';

    try {
        const response = await fetch('/power/' + docId, {
            method: 'POST',
        });

        if (!response.ok) {
            status.textContent = `Power Hour generation failed: ${response.status} - ${await response.text()}`;
            return;
        }

        const data = await response.json();
        status.textContent = 'Power Hour generated.';

        // In a real implementation you'd download/display the links

    } catch (error) {
        status.textContent = `Power Hour generation failed: ${error}`;
    }
}